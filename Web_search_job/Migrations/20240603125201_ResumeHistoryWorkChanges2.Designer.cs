// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web_search_job.Data;

#nullable disable

namespace Web_search_job.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240603125201_ResumeHistoryWorkChanges2")]
    partial class ResumeHistoryWorkChanges2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RefreshTokenExpiryTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Audit", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<string>("action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("action_created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.CommentToEmployer", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<long>("comment_stars")
                        .HasColumnType("bigint");

                    b.Property<string>("comment_text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("comment_title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("comments_to_employer_created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("employer_id")
                        .HasColumnType("int");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("employer_id");

                    b.HasIndex("user_id");

                    b.ToTable("CommentToEmployer");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.CompanyTags", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<int>("employer_id")
                        .HasColumnType("int");

                    b.Property<int?>("tags_list_id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("type_tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("employer_id");

                    b.HasIndex("tags_list_id");

                    b.ToTable("CompanyTags");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Employer", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<string>("company_background_img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("company_checked")
                        .HasColumnType("bit");

                    b.Property<string>("company_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("company_img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("company_industry_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("company_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("company_short_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("company_status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("company_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("company_year_experience")
                        .HasColumnType("int");

                    b.Property<DateTime>("employer_created_at")
                        .HasColumnType("datetime2");

                    b.Property<int?>("industry_id")
                        .HasColumnType("int");

                    b.Property<int?>("location_company_id")
                        .HasColumnType("int");

                    b.Property<int?>("number_workers")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("industry_id");

                    b.HasIndex("location_company_id");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.EmployerFolder.SubscribeToEmployer", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("SubscribeToEmployer");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.EmployerFolder.UsersOfEmployer", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<int>("employer_id")
                        .HasColumnType("int");

                    b.Property<string>("employer_role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("employer_id");

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("UsersOfEmployer");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Filters", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<string>("filter_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("filter_type_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("filter_type_id");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.FiltersTypes", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<string>("filter_type_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("FiltersTypes");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Industry", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<string>("industry_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Industry");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Job", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int?>("creater_user_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("date_approving")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("date_ending")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("date_last_editing")
                        .HasColumnType("datetime2");

                    b.Property<int?>("employer_id")
                        .HasColumnType("int");

                    b.Property<int?>("industry_job_id")
                        .HasColumnType("int");

                    b.Property<string>("job_background_img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("job_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("job_img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("job_salary_currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("job_salary_max")
                        .HasColumnType("int");

                    b.Property<int?>("job_salary_min")
                        .HasColumnType("int");

                    b.Property<string>("job_title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("location_job_id")
                        .HasColumnType("int");

                    b.Property<int>("number_candidates")
                        .HasColumnType("int");

                    b.Property<int>("number_view")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("creater_user_id");

                    b.HasIndex("employer_id");

                    b.HasIndex("industry_job_id");

                    b.HasIndex("location_job_id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.JobFolder.JobRecommendationList", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("date_creating")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("JobRecommendationList");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.JobFolder.JobRequest", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Positives")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Projects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("JobRequests");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.JobFolder.JobRequestFields", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<bool>("NeedAdditionalResume")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedResume")
                        .HasColumnType("bit");

                    b.Property<bool>("PositiveField")
                        .HasColumnType("bit");

                    b.Property<bool>("ProjectField")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("JobRequestFields");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.JobRequirement", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<string>("experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.Property<string>("language_level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("language_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("job_id")
                        .IsUnique();

                    b.ToTable("JobRequirements");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.JobTagsMarks", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.Property<bool>("tag_hot")
                        .HasColumnType("bit");

                    b.Property<bool>("tag_new")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("job_id")
                        .IsUnique();

                    b.ToTable("JobTagsMarks");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.JobTagsPros", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.Property<int?>("tags_list_id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("job_id");

                    b.HasIndex("tags_list_id");

                    b.ToTable("JobTagsPros");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Location", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<string>("location_city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location_country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location_region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ActiveResumeSection", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SectionId");

                    b.ToTable("ActiveResumeSections");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.LanguageLevel", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<string>("LangualeLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("LanguageLevels");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.Notification", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.Resume", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<bool>("ResumeActive")
                        .HasColumnType("bit");

                    b.Property<string>("ResumeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumeEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WantedSalary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Resume");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeAboutMe", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("ResumeAboutMeText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.ToTable("ResumeAboutMe");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeEducation", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("EducationProffesion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationYear")
                        .HasColumnType("int");

                    b.Property<int?>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeEducations");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeHistoryWork", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndWorkDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ResumeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartWorkDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeHistoryWorks");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeLanguage", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("Languale")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeLanguages");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeLinks", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeLinks");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumePortfolio", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("PortfolioImg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumePortfolio");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeSectionType", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("SectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResumeSectionType");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeSkills", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeSkills");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeTags", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<int?>("resume_id")
                        .HasColumnType("int");

                    b.Property<int?>("tags_list_id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("resume_id");

                    b.HasIndex("tags_list_id");

                    b.ToTable("ResumeTags");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Report", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<int?>("employer_id")
                        .HasColumnType("int");

                    b.Property<int?>("job_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("report_created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("report_target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("employer_id");

                    b.HasIndex("job_id");

                    b.HasIndex("user_id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.SavedJob", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("saved_job_created_at")
                        .HasColumnType("datetime2");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("job_id");

                    b.HasIndex("user_id");

                    b.ToTable("SavedJobs");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.TagsList", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"), 1L, 1);

                    b.Property<string>("tags_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TagsList");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.UserInfo", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime>("ActionCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserAge")
                        .HasColumnType("int");

                    b.Property<string>("UserImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("user_Id")
                        .IsUnique();

                    b.ToTable("UsersInfo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_search_job.DatabaseClasses.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Audit", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.CommentToEmployer", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Employer", "Employer")
                        .WithMany("CommentToEmployer")
                        .HasForeignKey("employer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_search_job.DatabaseClasses.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("Employer");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.CompanyTags", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Employer", "Employer")
                        .WithMany("CompanyTags")
                        .HasForeignKey("employer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_search_job.DatabaseClasses.TagsList", "TagsList")
                        .WithMany("CompanyTags")
                        .HasForeignKey("tags_list_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employer");

                    b.Navigation("TagsList");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Employer", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Industry", "Industry")
                        .WithMany("Employers")
                        .HasForeignKey("industry_id");

                    b.HasOne("Web_search_job.DatabaseClasses.Location", "Location")
                        .WithMany()
                        .HasForeignKey("location_company_id");

                    b.Navigation("Industry");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.EmployerFolder.SubscribeToEmployer", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_search_job.DatabaseClasses.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_search_job.DatabaseClasses.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_search_job.DatabaseClasses.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");

                    b.Navigation("Industry");

                    b.Navigation("Location");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.EmployerFolder.UsersOfEmployer", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Employer", "Employer")
                        .WithMany("UsersOfEmployer")
                        .HasForeignKey("employer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_search_job.DatabaseClasses.UserInfo", "UserInfo")
                        .WithOne("UsersOfEmployer")
                        .HasForeignKey("Web_search_job.DatabaseClasses.EmployerFolder.UsersOfEmployer", "user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Filters", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.FiltersTypes", "FilterType")
                        .WithMany("Filters")
                        .HasForeignKey("filter_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilterType");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Job", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("creater_user_id");

                    b.HasOne("Web_search_job.DatabaseClasses.Employer", "Employer")
                        .WithMany("Jobs")
                        .HasForeignKey("employer_id");

                    b.HasOne("Web_search_job.DatabaseClasses.Industry", "Industry")
                        .WithMany("Jobs")
                        .HasForeignKey("industry_job_id");

                    b.HasOne("Web_search_job.DatabaseClasses.Location", "Location")
                        .WithMany("Jobs")
                        .HasForeignKey("location_job_id");

                    b.Navigation("Employer");

                    b.Navigation("Industry");

                    b.Navigation("Location");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.JobFolder.JobRecommendationList", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Job", "Job")
                        .WithMany("JobRecommendationList")
                        .HasForeignKey("JobId");

                    b.HasOne("Web_search_job.DatabaseClasses.UserInfo", "UserInfo")
                        .WithMany("JobRecommendationList")
                        .HasForeignKey("UserId");

                    b.Navigation("Job");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.JobFolder.JobRequest", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_search_job.DatabaseClasses.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.JobFolder.JobRequestFields", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Job", "Job")
                        .WithOne("JobRequestFields")
                        .HasForeignKey("Web_search_job.DatabaseClasses.JobFolder.JobRequestFields", "JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.JobRequirement", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Job", "Job")
                        .WithOne("JobRequirements")
                        .HasForeignKey("Web_search_job.DatabaseClasses.JobRequirement", "job_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.JobTagsMarks", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Job", "Job")
                        .WithOne("JobTagsMarks")
                        .HasForeignKey("Web_search_job.DatabaseClasses.JobTagsMarks", "job_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.JobTagsPros", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Job", "Job")
                        .WithMany("JobTagsPros")
                        .HasForeignKey("job_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_search_job.DatabaseClasses.TagsList", "TagsList")
                        .WithMany("JobTagsPros")
                        .HasForeignKey("tags_list_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("TagsList");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ActiveResumeSection", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.ProfileFolder.Resume", "Resume")
                        .WithMany("ActiveResumeSection")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_search_job.DatabaseClasses.ProfileFolder.ResumeSectionType", "ResumeSectionType")
                        .WithMany("ActiveResumeSection")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("ResumeSectionType");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.Notification", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.Resume", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeAboutMe", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.ProfileFolder.Resume", "Resume")
                        .WithOne("ResumeAboutMe")
                        .HasForeignKey("Web_search_job.DatabaseClasses.ProfileFolder.ResumeAboutMe", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeEducation", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Industry", "Industry")
                        .WithMany("ResumeEducation")
                        .HasForeignKey("IndustryId");

                    b.HasOne("Web_search_job.DatabaseClasses.Location", "Location")
                        .WithMany("ResumeEducation")
                        .HasForeignKey("LocationId");

                    b.HasOne("Web_search_job.DatabaseClasses.ProfileFolder.Resume", "Resume")
                        .WithMany("ResumeEducation")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("Location");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeHistoryWork", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Employer", "Employer")
                        .WithMany("ResumeHistoryWork")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Web_search_job.DatabaseClasses.ProfileFolder.Resume", "Resume")
                        .WithMany("ResumeHistoryWork")
                        .HasForeignKey("ResumeId");

                    b.Navigation("Employer");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeLanguage", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.ProfileFolder.LanguageLevel", "LanguageLevel")
                        .WithMany("ResumeLanguage")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_search_job.DatabaseClasses.ProfileFolder.Resume", "Resume")
                        .WithMany("ResumeLanguage")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageLevel");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeLinks", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.ProfileFolder.Resume", "Resume")
                        .WithMany("ResumeLinks")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumePortfolio", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.ProfileFolder.Resume", "Resume")
                        .WithMany("ResumePortfolio")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeSkills", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.ProfileFolder.Resume", "Resume")
                        .WithMany("ResumeSkills")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeTags", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.ProfileFolder.Resume", "Resume")
                        .WithMany("ResumeTags")
                        .HasForeignKey("resume_id");

                    b.HasOne("Web_search_job.DatabaseClasses.TagsList", "TagsList")
                        .WithMany("ResumeTags")
                        .HasForeignKey("tags_list_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("TagsList");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Report", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Employer", "Employer")
                        .WithMany("Report")
                        .HasForeignKey("employer_id");

                    b.HasOne("Web_search_job.DatabaseClasses.Job", "Job")
                        .WithMany("Reports")
                        .HasForeignKey("job_id");

                    b.HasOne("Web_search_job.DatabaseClasses.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");

                    b.Navigation("Job");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.SavedJob", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Job", "Job")
                        .WithMany("SavedJobs")
                        .HasForeignKey("job_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_search_job.DatabaseClasses.UserInfo", "UserInfo")
                        .WithMany("SavedJobs")
                        .HasForeignKey("user_id");

                    b.Navigation("Job");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.UserInfo", b =>
                {
                    b.HasOne("Web_search_job.DatabaseClasses.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Web_search_job.DatabaseClasses.ApplicationUser", "ApplicationUser")
                        .WithOne("UserInfo")
                        .HasForeignKey("Web_search_job.DatabaseClasses.UserInfo", "user_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ApplicationUser", b =>
                {
                    b.Navigation("UserInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Employer", b =>
                {
                    b.Navigation("CommentToEmployer");

                    b.Navigation("CompanyTags");

                    b.Navigation("Jobs");

                    b.Navigation("Report");

                    b.Navigation("ResumeHistoryWork");

                    b.Navigation("UsersOfEmployer");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.FiltersTypes", b =>
                {
                    b.Navigation("Filters");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Industry", b =>
                {
                    b.Navigation("Employers");

                    b.Navigation("Jobs");

                    b.Navigation("ResumeEducation");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Job", b =>
                {
                    b.Navigation("JobRecommendationList");

                    b.Navigation("JobRequestFields");

                    b.Navigation("JobRequirements");

                    b.Navigation("JobTagsMarks");

                    b.Navigation("JobTagsPros");

                    b.Navigation("Reports");

                    b.Navigation("SavedJobs");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.Location", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("ResumeEducation");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.LanguageLevel", b =>
                {
                    b.Navigation("ResumeLanguage");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.Resume", b =>
                {
                    b.Navigation("ActiveResumeSection");

                    b.Navigation("ResumeAboutMe")
                        .IsRequired();

                    b.Navigation("ResumeEducation");

                    b.Navigation("ResumeHistoryWork");

                    b.Navigation("ResumeLanguage");

                    b.Navigation("ResumeLinks");

                    b.Navigation("ResumePortfolio");

                    b.Navigation("ResumeSkills");

                    b.Navigation("ResumeTags");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.ProfileFolder.ResumeSectionType", b =>
                {
                    b.Navigation("ActiveResumeSection");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.TagsList", b =>
                {
                    b.Navigation("CompanyTags");

                    b.Navigation("JobTagsPros");

                    b.Navigation("ResumeTags");
                });

            modelBuilder.Entity("Web_search_job.DatabaseClasses.UserInfo", b =>
                {
                    b.Navigation("JobRecommendationList");

                    b.Navigation("SavedJobs");

                    b.Navigation("UsersOfEmployer");
                });
#pragma warning restore 612, 618
        }
    }
}
